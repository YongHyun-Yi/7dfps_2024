[gd_resource type="ShaderMaterial" load_steps=12 format=2]

[ext_resource path="res://noisetexture.tres" type="Texture" id=1]

[sub_resource type="VisualShaderNodeScalarUniform" id=1]
uniform_name = "ScalarUniform"

[sub_resource type="VisualShaderNodeTextureUniform" id=2]
uniform_name = "TextureUniform"

[sub_resource type="VisualShaderNodeInput" id=3]
output_port_for_preview = 0
input_name = "uv"

[sub_resource type="VisualShaderNodeInput" id=4]
output_port_for_preview = 0
input_name = "uv"

[sub_resource type="VisualShaderNodeScalarFunc" id=5]
output_port_for_preview = 0
function = 0

[sub_resource type="VisualShaderNodeScalarOp" id=6]
output_port_for_preview = 0
default_input_values = [ 0, 0.0, 1, 2.0 ]
operator = 3

[sub_resource type="VisualShaderNodeTexture" id=7]
texture = ExtResource( 1 )

[sub_resource type="VisualShaderNodeScalarOp" id=8]
output_port_for_preview = 0
operator = 1

[sub_resource type="VisualShaderNodeScalarFunc" id=9]
output_port_for_preview = 0
function = 15

[sub_resource type="VisualShader" id=10]
code = "shader_type spatial;
render_mode depth_draw_alpha_prepass, cull_disabled, specular_schlick_ggx;

uniform sampler2D TextureUniform;
uniform sampler2D tex_frg_7;
uniform float ScalarUniform;



void vertex() {
// Output:0

}

void fragment() {
// Input:13
	vec3 n_out13p0 = vec3(UV, 0.0);

// TextureUniform:12
	vec3 n_out12p0;
	float n_out12p1;
	{
		vec4 n_tex_read = texture(TextureUniform, n_out13p0.xy);
		n_out12p0 = n_tex_read.rgb;
		n_out12p1 = n_tex_read.a;
	}

// Input:2
	vec3 n_out2p0 = vec3(UV, 0.0);

// Texture:7
	vec4 tex_frg_7_read = texture(tex_frg_7, n_out2p0.xy);
	vec3 n_out7p0 = tex_frg_7_read.rgb;
	float n_out7p1 = tex_frg_7_read.a;

// ScalarUniform:10
	float n_out10p0 = ScalarUniform;

// ScalarFunc:4
	float n_out4p0 = sin(n_out10p0);

// ScalarOp:5
	float n_in5p1 = 2.00000;
	float n_out5p0 = n_out4p0 / n_in5p1;

// ScalarOp:8
	float n_out8p0 = dot(n_out7p0, vec3(0.333333, 0.333333, 0.333333)) - n_out5p0;

// ScalarFunc:9
	float n_out9p0 = round(n_out8p0);

// Output:0
	ALBEDO = n_out12p0;
	ALPHA = n_out9p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( 55.2, -24.11 )
modes/cull = 2
modes/depth_draw = 3
nodes/fragment/0/position = Vector2( 880, 200 )
nodes/fragment/2/node = SubResource( 4 )
nodes/fragment/2/position = Vector2( -60, 120 )
nodes/fragment/4/node = SubResource( 5 )
nodes/fragment/4/position = Vector2( -60, 360 )
nodes/fragment/5/node = SubResource( 6 )
nodes/fragment/5/position = Vector2( 160, 360 )
nodes/fragment/7/node = SubResource( 7 )
nodes/fragment/7/position = Vector2( 140, 100 )
nodes/fragment/8/node = SubResource( 8 )
nodes/fragment/8/position = Vector2( 400, 340 )
nodes/fragment/9/node = SubResource( 9 )
nodes/fragment/9/position = Vector2( 600, 220 )
nodes/fragment/10/node = SubResource( 1 )
nodes/fragment/10/position = Vector2( -320, 380 )
nodes/fragment/12/node = SubResource( 2 )
nodes/fragment/12/position = Vector2( 600, -20 )
nodes/fragment/13/node = SubResource( 3 )
nodes/fragment/13/position = Vector2( 400, 20 )
nodes/fragment/connections = PoolIntArray( 4, 0, 5, 0, 8, 0, 9, 0, 5, 0, 8, 1, 9, 0, 0, 1, 7, 0, 8, 0, 12, 0, 0, 0, 10, 0, 4, 0, 13, 0, 12, 0, 2, 0, 7, 0 )

[resource]
resource_local_to_scene = true
shader = SubResource( 10 )
shader_param/ScalarUniform = -1.0
